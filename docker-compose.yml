version: '3'

services:
  db:
    image: postgres:11
    command: postgres -c 'max_connections=1000'
    environment:
      - POSTGRES_DB=ab2d
      - POSTGRES_USER=ab2d
      - POSTGRES_PASSWORD=ab2d
    # Docker exposes these ports to all containers in the compose by default
    # but if you are debugging on a local machine uncomment to test connectivity or open a connection
    # to the Postgres database
    ports:
      - "5432:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 10s
      timeout: 5s
      retries: 5
  build:
    image: maven:3-jdk-13
    working_dir: /usr/src/mymaven
    # Not necessary to run mvn package since we anticipate that project
    # has already built so we don't need to run this command
    command: ls /usr/src/mymaven/*/target && ls /root/.m2/repository
    volumes:
      - "${PWD}:/usr/src/mymaven"
      - "${HOME}/.m2:/root/.m2"
  api:
    build:
      context: ./api
    environment:
      # Limit RAM usage of each container because containers share a VM
      - JVM_INITIAL_RAM=${JVM_INITIAL_RAM:-5.0}
      - JVM_MIN_RAM=${JVM_MIN_RAM:-5.0}
      - JVM_MAX_RAM=${JVM_MAX_RAM:-10.0}
      # Postgres DB container credentials and config
      - AB2D_DB_HOST=db
      - AB2D_DB_PORT=5432
      - AB2D_DB_DATABASE=ab2d
      - AB2D_DB_SSL_MODE=allow
      - AB2D_DB_USER=ab2d
      - AB2D_DB_PASSWORD=ab2d
      # Location to store file within container
      - AB2D_EFS_MOUNT=/opt/ab2d
      # Credentials and location of HPMS sandbox
      - HPMS_AUTH_KEY_ID="${HPMS_AUTH_KEY_ID}"
      - HPMS_AUTH_KEY_SECRET="${HPMS_AUTH_KEY_SECRET}"
      - AB2D_HPMS_URL=${AB2D_HPMS_URL}
      - NEW_RELIC_LICENSE_KEY="${NEW_RELIC_LICENSE_KEY}"
      - NEW_RELIC_APP_NAME="${NEW_RELIC_APP_NAME}"
      # LOCAL always to shut off Kinesis logging
      - AB2D_EXECUTION_ENV=LOCAL
    ports:
      # Set port as an environment variable
      # The e2e-test forcefully sets this itself otherwise set via command line
      - "8443:8443"
    healthcheck:
      test: [ "CMD-SHELL", "curl -X GET http://localhost:8443/health --insecure" ]
      interval: 5s
      timeout: 5s
      retries: 40
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - tmp-volume:/opt/ab2d
  worker:
    build:
      context: ./worker
    environment:
      # Limit RAM usage of each container because containers share a VM
      - JVM_INITIAL_RAM=${JVM_INITIAL_RAM:-5.0}
      - JVM_MIN_RAM=${JVM_MIN_RAM:-5.0}
      - JVM_MAX_RAM=${JVM_MAX_RAM:-15.0}
      # DB credentials
      - AB2D_DB_HOST=db
      - AB2D_DB_PORT=5432
      - AB2D_DB_DATABASE=ab2d
      - AB2D_DB_SSL_MODE=allow
      - AB2D_DB_USER=ab2d
      - AB2D_DB_PASSWORD=ab2d
      # Location to store files within container
      - AB2D_EFS_MOUNT=/opt/ab2d
      # LOCAL always to shut off Kinesis logging
      - AB2D_EXECUTION_ENV=LOCAL
      # BFD prod sandbox credentials and location
      - AB2D_BFD_URL=https://prod-sbx.bfd.cms.gov/v1/fhir/
      - AB2D_BFD_KEYSTORE_PASSWORD=${AB2D_BFD_KEYSTORE_PASSWORD}
      - AB2D_BFD_KEYSTORE_LOCATION=${AB2D_BFD_KEYSTORE_LOCATION}
      - NEW_RELIC_LICENSE_KEY="${NEW_RELIC_LICENSE_KEY}"
      - NEW_RELIC_APP_NAME="${NEW_RELIC_APP_NAME}"
      # Hash info to decode encrypted info
      - AB2D_HICN_HASH_PEPPER=${AB2D_HICN_HASH_PEPPER}
      - AB2D_HICN_HASH_ITER=${AB2D_HICN_HASH_ITER}
      # Skip if running against prod sandbox data so always true
      - AB2D_CLAIMS_SKIP_BILLABLE_PERIOD_CHECK=${AB2D_CLAIMS_SKIP_BILLABLE_PERIOD_CHECK}
      # Cert used to prove that keystore app has rights to bfd sandbox
      - AB2D_KEYSTORE_LOCATION=${AB2D_KEYSTORE_LOCATION}
      - AB2D_KEYSTORE_PASSWORD=${AB2D_KEYSTORE_PASSWORD}
      - AB2D_KEY_ALIAS=${AB2D_KEY_ALIAS}
      # Update coverage frequently so that tests aren't slowed down too much
      - "COVERAGE_UPDATE_LOAD_SCHEDULE=0/1 * * * * ?"
      - "COVERAGE_UPDATE_MONITORING_INTERVAL=0/1 * * * * ?"
    depends_on:
      db:
        condition: service_healthy
      api:
        condition: service_healthy
    volumes:
      - tmp-volume:/opt/ab2d

# This needs a shared volume so that both the API and worker module can access the ndjson files being generated
volumes:
  tmp-volume:
    driver: local
    driver_opts:
      type: none
      device: /opt/ab2d
      o: bind
