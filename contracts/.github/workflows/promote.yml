name: Promote contracts
run-name: promote ${{ inputs.image_tag }}

on:
  workflow_call:
    inputs:
      image_tag:
        required: true
        type: string
  workflow_dispatch:
    inputs:
      image_tag:
        description: ECR image tag for selected module (contracts-service-<branch>-<SHA>)
        required: true
        type: string

permissions:
  contents: read
  id-token: write

env:
  TAG_NAME: ${{ inputs.image_tag }}
  SOURCE_REPO: ab2d-contracts
  DEST_REPO: ab2d-contracts

jobs:
  promote:
    permissions:
      contents: read
      id-token: write
    runs-on: codebuild-ab2d-contracts-${{github.run_id}}-${{github.run_attempt}}

    steps:
      - name: Authenticate to non-prod AWS account
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ vars.AWS_REGION }}
          role-to-assume: arn:aws:iam::${{ secrets.GF_NON_PROD_ACCOUNT }}:role/delegatedadmin/developer/ab2d-dev-github-actions

      - name: Pull image from non-prod ECR
        id: pull-image
        run: |
          ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          SRC_ECR="$ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com"
          docker login --username AWS --password-stdin $SRC_ECR <<< $(aws ecr get-login-password)
          echo "Pulling $SRC_ECR/$SOURCE_REPO:$TAG_NAME"
          docker pull "$SRC_ECR/$SOURCE_REPO:$TAG_NAME"
          echo "IMAGE=$SRC_ECR/$SOURCE_REPO:$TAG_NAME" >> $GITHUB_OUTPUT

      - name: Authenticate to prod AWS account
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ vars.AWS_REGION }}
          role-to-assume: arn:aws:iam::${{ secrets.GF_PROD_ACCOUNT }}:role/delegatedadmin/developer/ab2d-sandbox-github-actions

      - name: Tag and push image to prod ECR
        env:
          IMAGE: ${{ steps.pull-image.outputs.IMAGE }}
        run: |
          ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          DEST_ECR="$ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com"
          docker login --username AWS --password-stdin $DEST_ECR <<< $(aws ecr get-login-password)
          echo "Tagging and pushing image to $DEST_ECR/$DEST_REPO:$TAG_NAME"
          docker tag "$IMAGE" "$DEST_ECR/$DEST_REPO:$TAG_NAME"
          docker push "$DEST_ECR/$DEST_REPO:$TAG_NAME"
