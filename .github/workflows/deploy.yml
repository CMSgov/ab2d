name: deploy

on:
  workflow_call:
    inputs:
      environment:
        required: true
        type: string
      module:
        required: true
        type: string
  workflow_dispatch:
    inputs:
      environment:
        required: true
        type: choice
        options:
          - dev
          - test
          - sbx
          - prod
          - prod_test
      module:
        required: true
        type: choice
        options:
          - api
          - worker

env:
  # workflow file matchers - workflow jobs will only run if matching files are found
  # please see https://github.com/CMSgov/beneficiary-fhir-data/pull/773 for why we
  # are using this workflow logic
  # NOTE: The expression below can be extended to multi-line
  # using a '\' as a continuation character.
  # https://stackoverflow.com/questions/6268391/is-there-a-way-to-represent-a-long-string-that-doesnt-have-any-whitespace-on-mul
  workflow_files_re: "^(api|common|coverage|e2e-bfd-test|e2e-test|job|src|worker)/.+$|^pom.xml$|^settings.xml$"

jobs:
  workflow:
    name: Checking workflow
    runs-on: ubuntu-24.04
    outputs:
      files: ${{ steps.workflow_files.outputs.files }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 2
      - id: workflow_files
        name: Set output
        run: |
          echo "files<<EOF" >> $GITHUB_OUTPUT
          echo "$(git diff --name-only --diff-filter=ACMRTD HEAD^ HEAD | grep -P '${{ env.workflow_files_re }}')" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
  deploy:
    needs: workflow
    if: needs.workflow.output.files
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    steps:
      - uses: aws-actions/configure-aws-credentials@e3dd6a429d7300a6a4c196c26e071d42e0343502 # v4.0.2
        env:
          ACCOUNT: ${{ inputs.environment == 'prod_test' && 'prod' || inputs.environment }}
        with:
          aws-region: ${{ vars.AWS_REGION }}
          role-to-assume: arn:aws:iam::${{ secrets[format('{0}_ACCOUNT_ID', env.ACCOUNT)] }}:role/delegatedadmin/developer/ab2d-${{ env.ACCOUNT }}-github-actions

      - name: Deploy ECS service to run on latest image in ECR
        env:
          SERVICE_NAME: ab2d-${{ vars[format('{0}_DEPLOYMENT_ENV', inputs.environment)] }}-${{ inputs.module }}
        run: |
          echo "Deploying service $SERVICE_NAME"
          aws ecs update-service --cluster "$SERVICE_NAME" --service "$SERVICE_NAME" --force-new-deployment > /dev/null
          echo "Waiting for ECS service to stabilize..."
          exit_status=1
          set +e
          while [ "$exit_status" != "0" ]; do
            aws ecs wait services-stable --cluster "$SERVICE_NAME" --services "$SERVICE_NAME"
            exit_status="$?"
            echo "Wait result: $exit_status"
          done
          set -e
          echo "âœ… ECS service stabilized."
