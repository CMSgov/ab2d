name: deploy-lambdas

#  booleanParam(defaultValue: false, name: 'APPLY', description: "Apply output from plan?")
#  choice(choices: ["-",'ab2d-east-impl', 'ab2d-dev', 'ab2d-sbx-sandbox', 'ab2d-east-prod', 'ab2d-east-prod-test'], name: 'PARENT_ENV', description: "Ab2d environment?")
#  string(defaultValue: 'main', name: 'BRANCH_NAME', description: "Github branch?")
#  string(defaultValue: 'main', name: 'AB2D_REPO_REF', description: "ab2d-lambda branch?")

on:
#  push:
#    branches:
#      - lambda-tf-workflow
  workflow_call:
    inputs:
      apply:
        type: boolean
        required: true
        default: false
      environment:
        required: true
        type: string
      ab2dOpsBranch:
        type: string
        required: true
      ab2dLambdasBranch:
        type: string
        required: true
      runBuildJob:
        type: boolean
        required: true
        default: false
      buildVersion:
        type: string
        required: false

  workflow_dispatch:
    inputs:
      apply:
        type: boolean
        required: true
        default: false
        description: 'Apply output from terraform plan?'
      environment:
        description: 'AB2D environment'
        required: true
        type: choice
        options:
          - dev
          - test
          - sbx
          - prod_test
          - prod
      ab2dOpsBranch:
        type: string
        required: true
        description: 'Branch for ab2d-ops'
      ab2dLambdasBranch:
        type: string
        required: true
        description: 'Branch for ab2d-lambdas'
      runBuildJob:
        type: boolean
        required: true
        default: false
        description: 'Build lambdas before publishing'
      buildVersion:
        type: string
        required: false
        description: 'Version of lambda you want to deploy - This is ignored if you check runBuildJob'

jobs:
  publish_lambdas:
    uses: cmsgov/ab2d-lambdas/.github/workflows/publish-lambdas.yml@update-publish-lamda-workflow
    with:
      environment: dev
    if: ${{ inputs.runBuildJob == true }}

  deploy:
    runs-on: self-hosted
    needs: publish_lambdas
    env:
      ACTIONS_ALLOW_USE_UNSECURE_NODE_VERSION: true
      AWS_REGION: ${{ vars.AWS_REGION }}
      DEPLOYMENT_ENV: ${{ vars[format('{0}_DEPLOYMENT_ENV', inputs.environment)] }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          repository: 'cmsgov/ab2d-ops'
          ref: ${{ inputs.ab2dOpsBranch }}

      - name: Determine lambdas build version
        run: |
          buildVersion=$(echo ${{ needs.publish_lambdas.outputs.build_version || inputs.buildVersion }} | tr -d ' ')
          echo "buildVersion=$buildVersion"
          echo "BUILD_VERSION=$buildVersion" >> $GITHUB_ENV

      - name: Assume role in AB2D account for this environment
        uses: aws-actions/configure-aws-credentials@v3
        env:
          ACCOUNT: ${{ inputs.environment == 'prod_test' && 'prod' || inputs.environment }}
        with:
          aws-region: ${{ vars.AWS_REGION }}
          role-to-assume: arn:aws:iam::${{ secrets[format('{0}_ACCOUNT_ID', env.ACCOUNT)] }}:role/delegatedadmin/developer/ab2d-${{ env.ACCOUNT }}-github-actions

      - name: Set Artifactory-related environment variables
        uses: cmsgov/ab2d-bcda-dpc-platform/actions/aws-params-env-action@main
        env:
          AWS_REGION: ${{ vars.AWS_REGION }}
        with:
          params: |
            ARTIFACTORY_URL=/artifactory/url
            ARTIFACTORY_USER=/artifactory/user
            ARTIFACTORY_PASSWORD=/artifactory/password

      - name: Download ZIP files
        env:
          ARTIFACTORY_PREFIX: 'https://artifactory.cloud.cms.gov/artifactory/ab2d-main/gov/cms/ab2d'

        run: |
          curl -u "${ARTIFACTORY_USER}:${ARTIFACTORY_PASSWORD}" "${ARTIFACTORY_PREFIX}/metrics-lambda/${BUILD_VERSION}/metrics-lambda-${BUILD_VERSION}.zip" --output metrics-lambda.zip

#          mkdir -p terraform/modules/lambda/event-service || true
#          cd terraform/modules/lambda/event-service
#          curl -u "${ARTIFACTORY_USER}:${ARTIFACTORY_PASSWORD}" "https://artifactory.cloud.cms.gov/artifactory/ab2d-main/gov/cms/ab2d/metrics-lambda/${buildVersion//[$'\t\r\n ']}/metrics-lambda-${buildVersion//[$'\t\r\n ']}.zip" --output metrics-lambda.zip
#          curl -u "${ARTIFACTORY_USER}:${ARTIFACTORY_PASSWORD}" "https://artifactory.cloud.cms.gov/artifactory/ab2d-main/gov/cms/ab2d/audit/${buildVersion//[$'\t\r\n ']}/audit-${buildVersion//[$'\t\r\n ']}.zip" --output audit.zip
#          curl -u "${ARTIFACTORY_USER}:${ARTIFACTORY_PASSWORD}" "https://artifactory.cloud.cms.gov/artifactory/ab2d-main/gov/cms/ab2d/database-management/${buildVersion//[$'\t\r\n ']}/database-management-${buildVersion//[$'\t\r\n ']}.zip" --output database-management.zip
#          curl -u "${ARTIFACTORY_USER}:${ARTIFACTORY_PASSWORD}" "https://artifactory.cloud.cms.gov/artifactory/ab2d-main/gov/cms/ab2d/coverage-counts/${buildVersion//[$'\t\r\n ']}/coverage-counts-${buildVersion//[$'\t\r\n ']}.zip" --output coverage-counts.zip
#          curl -u "${ARTIFACTORY_USER}:${ARTIFACTORY_PASSWORD}" "https://artifactory.cloud.cms.gov/artifactory/ab2d-main/gov/cms/ab2d/retrieve-hpms-counts/${buildVersion//[$'\t\r\n ']}/retrieve-hpms-counts-${buildVersion//[$'\t\r\n ']}.zip" --output retrieve-hpms-counts.zip
#          cd -