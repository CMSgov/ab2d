name: publish-lambdas-gf
on:
  workflow_call:
    inputs:
      run_sonar:
        type: boolean
        default: true
    outputs:
      build_version:
        description: The lambdas build version
        value: ${{ jobs.publish.outputs.build_version }}
  workflow_dispatch:
    inputs:
      run_sonar:
        description: Run SonarQube
        type: boolean
        default: true
env:
  JDK_JAVA_OPTIONS: '--add-opens java.base/java.util=ALL-UNNAMED'
jobs:
  publish:
    permissions:
      contents: read
      id-token: write
    defaults:
      run:
        working-directory: ./lambdas
    runs-on: codebuild-ab2d-${{ github.run_id }}-${{ github.run_attempt }}
    outputs:
      build_version: ${{ steps.publish_lambdas.outputs.build_version }}
    env:
      AWS_REGION: ${{ vars.AWS_REGION }}
      AWS_ACCOUNT: ${{ secrets.NON_PROD_ACCOUNT }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with:
          distribution: adopt
          java-version: '17'
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ vars.AWS_REGION }}
          role-to-assume: >-
            arn:aws:iam::${{ env.AWS_ACCOUNT
            }}:role/delegatedadmin/developer/ab2d-test-github-actions

      - uses: cmsgov/cdap/actions/aws-params-env-action@main
        env:
          AWS_REGION: ${{ vars.AWS_REGION }}
        with:
          params: |
            ARTIFACTORY_URL=/artifactory/url
            ARTIFACTORY_USER=/artifactory/user
            ARTIFACTORY_PASSWORD=/artifactory/password
            SONAR_HOST_URL=/sonarqube/url
            SONAR_TOKEN=/sonarqube/token

      - name: Verify Required Libraries
        run: |
          echo "Checking for required system libraries..."
          ldd --version || echo "ldd (glibc) is not installed!"
          ldconfig -p | grep "libstdc++" || echo "libstdc++ is missing!"
          ldconfig -p | grep "zlib" || echo "zlib is missing!"

      - name: Build Lambdas
        run: ./gradlew -b build.gradle

      - name: Test Lambdas
        run: ./gradlew clean test --info -b build.gradle

      - name: Build Jars
        run: ./gradlew buildZip --info -b build.gradle

      - name: SonarQube Analysis
        if: ${{ inputs.run_sonar == true }}
        run: |
          ./gradlew sonar \
            -Dsonar.ci.autoconfig.disabled=true \
            -Dsonar.projectKey=ab2d-lambdas \
            -Dsonar.host.url=$SONAR_HOST_URL \
            -Dsonar.token=$SONAR_TOKEN

      - name: Quality Gate
        if: ${{ inputs.run_sonar == true }}
        uses: sonarsource/sonarqube-quality-gate-action@master
        with:
          scanMetadataReportFile: build/sonar/report-task.txt
        timeout-minutes: 10
      - name: Publish Lambdas
        id: publish_lambdas
        run: >
          echo "Checking for unpublished artifacts..."

          DEPLOY_SCRIPT=""

          VERSION_PUBLISHED_LIST=$(./gradlew -q lookForArtifacts |  tr "'''"
          "\n")

          while IFS= read -r line; do
            ARTIFACTORY_INFO=($(echo $line | tr ":" "\n"))
            if [[ "${ARTIFACTORY_INFO[1]}" == "false" ]]; then
              echo "Deploying ${ARTIFACTORY_INFO[0]}"
              DEPLOY_SCRIPT+="${ARTIFACTORY_INFO[0]}:artifactoryPublish "
            fi
          done <<< "$VERSION_PUBLISHED_LIST"

          if [[ -n "$DEPLOY_SCRIPT" ]]; then
            echo "Publishing: $DEPLOY_SCRIPT"
            ./gradlew $DEPLOY_SCRIPT -b build.gradle \
              -Dusername="${ARTIFACTORY_USER}" \
              -Dpassword="${ARTIFACTORY_PASSWORD}" \
              -Drepository_url="${ARTIFACTORY_URL}"
          else
            echo "No new artifacts to publish."
          fi

          BUILD_VERSION=$(./gradlew properties -q | grep "version:" | awk
          '{print $2}')

          echo "Build version: $BUILD_VERSION"

          echo "build_version=$BUILD_VERSION" >> "$GITHUB_OUTPUT"

      - name: SBOM
        run: |
          ./gradlew cyclonedxBom --info -b build.gradle
