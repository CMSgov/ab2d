
name: start-job-gf
run-name: start-job-gf ${{ inputs.environment }} ${{ inputs.contractNumber }}

on:
  workflow_dispatch: # Allow manual trigger
    inputs:
      environment:
        description: 'AB2D environment'
        type: choice
        options:
          - dev
          - test
          - sandbox
          - prod
        default: test
      contractNumber:
        description: 'Contract to start a job for'
        type: string
        required: true
        default: 'Z0001'
      fhirVersion:
        description: 'FHIR version'
        type: choice
        options:
          - STU3
          - R4
        default: STU3
      since:
        description: 'Since date to use for a job. The earliest accepted date is 2020-02-13T00:00:00.000-05:00'
        type: string
        required: true
      until:
        description: 'Until date to use for a job. Accepted date format for V2 is 2020-02-13T00:00:00.000-05:00'
        type: string
        required: false
      apiUrlPrefix:
        description: 'Origin of request for a job. May correspond to actual AB2D API URL or not. Leave blank to populate default value.'
        type: string
        required: false

permissions:
  contents: read
  id-token: write

jobs:
  start-job:
    runs-on: codebuild-ab2d-${{github.run_id}}-${{github.run_attempt}}

    env:
      CONTRACT_NUMBER: ${{ inputs.contractNumber }}
      FHIR_VERSION: ${{ inputs.fhirVersion }}
      SINCE: ${{ inputs.since }}
      UNTIL: ${{ inputs.until }}
      API_URL_PREFIX: ${{ inputs.apiUrlPrefix }}
      AB2D_ENV: ${{ inputs.environment }}
      AWS_ACCOUNT: ${{contains(fromJSON('["dev", "test"]'), inputs.environment) && secrets.NON_PROD_ACCOUNT || secrets.PROD_ACCOUNT}}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set environment-specific variables
        run: |
          SECRET_STORE_PREFIX="ab2d/$AB2D_ENV"
          
          if [ "$AB2D_ENV" == "dev" ]; then
            DEFAULT_API_URL_PREFIX="https://dev.ab2d.cms.gov"
          elif [ "$AB2D_ENV" == "test" ]; then
            DEFAULT_API_URL_PREFIX="https://impl.ab2d.cms.gov"
          elif [ "$AB2D_ENV" == "sandbox" ]; then
            DEFAULT_API_URL_PREFIX="https://sandbox.ab2d.cms.gov"
          elif [ "$AB2D_ENV" == "prod" ]; then
            DEFAULT_API_URL_PREFIX="https://api.ab2d.cms.gov" 
          else
            echo "Invalid environment: $ENVIRONMENT"
            exit 1
          fi
          
          echo "SECRET_STORE_PREFIX=${SECRET_STORE_PREFIX}" >> $GITHUB_ENV
          echo "DEFAULT_API_URL_PREFIX=${DEFAULT_API_URL_PREFIX}" >> $GITHUB_ENV

      - name: Assume AWS role
        uses: aws-actions/configure-aws-credentials@ececac1a45f3b08a01d2dd070d28d111c5fe6722 # v4.1.0
        with:
          aws-region: ${{ vars.AWS_REGION }}
          role-to-assume: arn:aws:iam::${{ env.AWS_ACCOUNT }}:role/delegatedadmin/developer/ab2d-${{ env.AB2D_ENV }}-github-actions

      - name: Set env vars from AWS params in AB2D account
        uses: ./.github/workflows/actions/set-database-params
        with:
          aws_region: ${{ vars.AWS_REGION }}
          secret_store_prefix: ${{ env.SECRET_STORE_PREFIX }}

      - name: Install psql
        run: |
          sudo dnf install postgresql15 -y

      - name: Insert record
        run: |
          set -e
          export JOB_ID=$(uuidgen)
          
          SQL_GET_ORGANIZATION=$(envsubst < .github/workflows/resources/get-organization.sql)
          export ORGANIZATION=$(psql -t --command="${SQL_GET_ORGANIZATION}" | head -n 1 | xargs | tr -d '\r')
          if [ -z "${ORGANIZATION}" ]; then
            echo "Unable to retrieve organization"
            exit 1
          fi

          if [[ ${FHIR_VERSION} = "R4" ]]; then
            export UNTIL="'${UNTIL}'"
          else
            export UNTIL="null"
          fi
          
          if [ -z "${API_URL_PREFIX}" ]; then
            export API_URL_PREFIX=${DEFAULT_API_URL_PREFIX}
          fi
          
          SQL_INSERT_RECORD=$(envsubst < .github/workflows/resources/insert-record.sql)
          psql -t --command="${SQL_INSERT_RECORD}"
          echo "Inserted record with job UUID = $JOB_ID"
