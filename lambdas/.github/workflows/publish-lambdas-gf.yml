name: publish-lambdas-gf

on:
  workflow_call:
    inputs:
      ref:
        required: false
        type: string
        description: 'Branch name - used when called by cmsgov/ab2d/deploy-lambda.yml'
    outputs:
      build_version:
        description: "The lambdas build version"
        value: ${{ jobs.publish.outputs.build_version }}
  workflow_dispatch:

jobs:
  publish:
    permissions:
      contents: read
      id-token: write
    runs-on:
      - codebuild-ab2d-lambdas-${{ github.run_id }}-${{ github.run_attempt }}
    outputs:
      build_version: ${{ steps.publish_lambdas.outputs.build_version }}
    env:
      ACTIONS_ALLOW_USE_UNSECURE_NODE_VERSION: true
      AWS_REGION: ${{ vars.AWS_REGION }}
      AWS_ACCOUNT: ${{ secrets.NON_PROD_ACCOUNT }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          # specify repo and ref (branch) to allow this workflow to be called from cmsgov/ab2d/deploy-lambda.yml
          repository: 'cmsgov/ab2d-lambdas'
          ref: ${{ inputs.ref || github.ref }}

      - uses: actions/setup-java@8df1039502a15bceb9433410b1a100fbe190c53b # v4.5.0
        with:
          distribution: adopt
          java-version: '15'

      - uses: gradle/actions/setup-gradle@0bdd871935719febd78681f197cd39af5b6e16a6 # v4.2.2
        with:
         gradle-version: 7.2

      - uses: aws-actions/configure-aws-credentials@e3dd6a429d7300a6a4c196c26e071d42e0343502 # v4.0.2
        with:
          aws-region: ${{ vars.AWS_REGION }}
          role-to-assume: arn:aws:iam::${{ env.AWS_ACCOUNT }}:role/delegatedadmin/developer/ab2d-test-github-actions

      - uses: cmsgov/cdap/actions/aws-params-env-action@main
        env:
          AWS_REGION: ${{ vars.AWS_REGION }}
        with:
          params: |
            ARTIFACTORY_URL=/artifactory/url
            ARTIFACTORY_USER=/artifactory/user
            ARTIFACTORY_PASSWORD=/artifactory/password
            SONAR_HOST_URL=/sonarqube/url
            SONAR_TOKEN=/sonarqube/token
      - name: Verify Required Libraries
        run: |
          echo "Checking for required system libraries..."
          ldd --version || echo "ldd (glibc) is not installed!"
          ldconfig -p | grep "libstdc++" || echo "libstdc++ is missing!"
          ldconfig -p | grep "zlib" || echo "zlib is missing!"
      - name: Build Lambdas
        run: |
          ./gradlew -b build.gradle

      - name: Test Lambdas
        run: |
           ./gradlew clean test --info -b build.gradle

      - name: Build Jars
        run: |
          ./gradlew buildZip --info -b build.gradle

# Skip SonarQube / quality gate because this fails currently due to:
#   Multiple CI environments are detected: [AwsCodeBuild, Github Actions]. Please check environment variables or set property sonar.ci.autoconfig.disabled to true.
#      - name: SonarQube Analysis
#        run: |
#         ./gradlew sonarqube -Dsonar.projectKey=ab2d-lambdas -Dsonar.host.url=https://sonarqube.cloud.cms.gov
#
#      - name: Quality Gate
#        run: |
#         echo "Waiting for SonarQube Quality Gate..."
#         sleep 600  # Simulate a 10-minute wait (adjust based on actual implementation)
#
#      - name: SBOM
#        run: |
#         ./gradlew cyclonedxBom --info -b build.gradle

      - name: Publish Lambdas
        id: publish_lambdas
        run: |
          echo "Checking for unpublished artifacts..."
          DEPLOY_SCRIPT=""
          VERSION_PUBLISHED_LIST=$(./gradlew -q lookForArtifacts |  tr "'''" "\n")
          while IFS= read -r line; do
            ARTIFACTORY_INFO=($(echo $line | tr ":" "\n"))
            if [[ "${ARTIFACTORY_INFO[1]}" == "false" ]]; then
              echo "Deploying ${ARTIFACTORY_INFO[0]}"
              DEPLOY_SCRIPT+="${ARTIFACTORY_INFO[0]}:artifactoryPublish "
            fi
          done <<< "$VERSION_PUBLISHED_LIST"
          if [[ -n "$DEPLOY_SCRIPT" ]]; then
            echo "Publishing: $DEPLOY_SCRIPT"
            ./gradlew $DEPLOY_SCRIPT -b build.gradle \
              -Dusername="${ARTIFACTORY_USER}" \
              -Dpassword="${ARTIFACTORY_PASSWORD}" \
              -Drepository_url="${ARTIFACTORY_URL}"
          else
            echo "No new artifacts to publish."
          fi
          BUILD_VERSION=$(./gradlew properties -q | grep "version:" | awk '{print $2}')
          echo "Build version: $BUILD_VERSION"
          echo "build_version=$BUILD_VERSION" >> "$GITHUB_OUTPUT"
